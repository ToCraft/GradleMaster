buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.2.6+'
    }
}

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            if (project.hasProperty("parchmentmc_mappings")) {
                parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:" + project.getProperty("parchmentmc_mappings") + "@zip")
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.      
        maven { url "https://maven.parchmentmc.org" }
        maven { url "https://maven.neoforged.net/releases/" }
        maven {
            name = "tocraftMavenPublic"
            url "https://maven.tocraft.dev/public"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = project.hasProperty("java_version") ? Integer.parseInt(project.property("java_version") as String) : 17 as Integer
    }

    ext {
        // Original by Flemmli97
        releaseChangelog = { int versions ->
            try {
                String changelog = ""
                int match = 0
                String previousIT = ""
                rootProject.file("CHANGELOG.md").eachLine {
                    if (it.contains("================")) {
                        match++
                        //changelog += previousIT
                    }
                    if (match <= versions) {
                        changelog += previousIT + "\n"
                    }
                    previousIT = it
                    return
                }
                return changelog + "\n\n"
            } catch (exception) {
                return "${rootProject.archives_base_name} ${rootProject.mod_version}\n==========\nThere was an error generating the changelog" + exception.getLocalizedMessage()
            }
        }
    }

    java {
        withSourcesJar()
    }
}

//Splits the changelog into multiple parts if they get bigger than discords embed field size (1024)
def discordChangelog() {
    def changelog = ext.releaseChangelog(1)
    List<String> res = new ArrayList()
    if (changelog.size() < 1024) {
        res.add(changelog)
        return res
    }
    String temp = ""
    changelog.split("\n" as Closure).each {
        it = it + "\n"
        if ((temp.size() + it.size()) >= 1024) {
            res.add(temp)
            temp = it
        } else
            temp += it
    }
    res.add(temp)
    return res
}

// based on the code by Flemmli97
task discordRelease {
    doLast {
        try {
            def webhook = new Webhook(System.getenv("DISCORD_WEB_HOOK"), "${rootProject.name} Upload")

            def message = new Message()
            message.setUsername("Mod Release")
            def content = "${rootProject.name} ${project.mod_version} has been released!"
            if (project.hasProperty("ping_role")) {
                content = "<@&${project.getProperty("ping_role")}> " + content
            }
            message.setContent(content)
            message.setAvatarUrl("https://avatars.githubusercontent.com/u/38883321")

            def embed = new Embed()

            def changelog = discordChangelog()
            if (changelog.size() == 1)
                embed.addField('Change Log', "```md\n${changelog.get(0) ?: 'Unavailable :('}```", false)
            else
                changelog.forEach {
                    embed.addField("Change Log", "```md\n${it}```", false)
                }
            embed.setColor(0xFF8000)
            message.addEmbed(embed)

            webhook.sendMessage(message)
        }

        catch (IOException ignored) {
            println 'Failed to push to the Discord webhook.'
        }
        println "Send Changelog to Discord."
    }
}

task extractNewestChangelog {
    String fileName = "extracted.CHANGELOG.md";
    // delete file if exists
    delete fileName
    doLast {
        // write changelog
        FileWriter fw = new FileWriter(fileName);
        fw.write(releaseChangelog(1));
        fw.close()
        println "Extracted newest Changelog to \"extracted.CHANGELOG.md\""
    }
}
