import java.text.SimpleDateFormat

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchmentmc_mappings}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.      
        maven { url "https://maven.parchmentmc.org" }
        maven { url "https://maven.neoforged.net/releases/" }
        maven {
            name = "tocraftMavenPublic"
            url "https://maven.tocraft.dev/public"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    ext {
        // Original by Flemmli97
        releaseChangelog = {
            try {
                def changelog = ""
                def match = 0
                rootProject.file("CHANGELOG.md").eachLine {
                    if (it.matches("${rootProject.archives_base_name} [0-9]\\.[0-9]+\\.[0-9]+(\\.[0-9]*)?"))
                        match++
                    if (match <= 1) {
                        changelog += it + "\n"
                    } else
                        return
                }
                return changelog + "\n\n"
            } catch (exception) {
                return "${rootProject.archives_base_name} ${rootProject.mod_version}\n==========\nThere was an error generating the changelog"
            }
        }
    }

    java {
        withSourcesJar()
    }
}
